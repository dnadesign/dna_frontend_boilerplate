#!/usr/bin/env php
<?php

/**
 * helix (1)
 *
 * This is the command line runner for managing helix project. It allows the 
 * user to create components and build new projects out of those components.
 *
 * For best use, this should be symlinked to your /usr/local/bin
 *
 * > sudo ln -s /usr/local/bin/helix ~/Scripts/helix/bin/helix
 */
$IGNORED_LIST_FILES = array(".","..", ".DS_Store");

$op = null;
$updated = false;

if (isset($_SERVER['argv'][1])) {
	$op = $_SERVER['argv'][1];
}

$pwd = $_SERVER['PWD'];
$swd = dirname(dirname(realpath($_SERVER['argv'][0])));
$assets = $swd .'/helix/assets';

require_once $swd . '/bin/lib/Helpers.php';

$setupFiles = array(
	'.bowerrc',
	'bower.json',
	'Gruntfile.js',
	'package.json',
	'Makefile'
);

$setupFolders = array(
	'build',
	'build/components',
	'images',
	'images/svg',
	'dist'
);

$bower = array(
	'jquery',
	'bootstrap',
	'radio',
	'modernizer'
);

function installComponent($pwd, $swd, $name) {
	if(file_exists($pwd .'/build/components/'. $name)) {
		failure('EROR', $name . ' is already installed. Please remove first.');
	}

	$path = $swd .'/components/' . $name;

	if(file_exists($path)) {
		recurse_copy($path, $pwd .'/build/components/'. $name);

		success('DONE', $name . ' installed');
	} else {
		failure('ERROR', $name . ' cannot be found.');
	}
}

function updateHelix($pwd, $swd) {
	success('UPD', "Updating $swd");

	exec("cd $swd && git pull origin master");
}

function updateInstalledHelix($pwd, $swd) {
	success("NEW", "Updated build/helix/");

	recurse_copy($swd .'/helix', $pwd .'/build/helix/');
}

switch($op) {
	case 'setup':
		updateInstalledHelix($pwd, $swd);

		foreach($setupFiles as $file) {
			if(!file_exists($pwd .'/'. $file)) {
				success("NEW", "Writing $file");

				file_put_contents(
					$pwd .'/'. $file,
					file_get_contents($assets .'/'. $file)
				);
			} else {
				warn("WRN", "$file exists, not overriding");
			}
		}

		foreach($setupFolders as $folder) {
			success("NEW", "Creating $pwd/$folder");

			if(!file_exists($pwd.'/'.$folder)) {
				mkdir($pwd.'/'. $folder);
			}
		}

		message("Setting up NPM");
		exec("npm install --silent");

		message("Installing bower");
		exec("npm install bower -g");

		message("Setting up bower");
		exec("bower install");

		message("Setting up modernizr");
		exec("grunt modernizr");

		message("Installing bower dependancies");

		foreach($bower as $dependancy) {
			message(" - $dependancy");

			exec("bower install $dependancy");
		}

		message("Importing global");
		installComponent($pwd, $swd, 'forms');
		installComponent($pwd, $swd, 'type');
		installComponent($pwd, $swd, 'grid');
		installComponent($pwd, $swd, 'reset');
	break;

	case 'create':
		if(isset($_SERVER['argv'][2])) {
			$folder = $_SERVER['argv'][2];

			if(!file_exists($pwd.'/build/components')) {
				mkdir($pwd.'/build/components');
			}
			
			success("NEW", "Creating $pwd/build/components/$folder");
			$path = $pwd.'/build/components/'.$folder;

			if(!file_exists($path)) {
				mkdir($path);
			}

			touch($pwd.'/build/components/'.$folder.'/'.$folder.'.less');
			success("NEW", "Creating $pwd/build/components/$folder/$folder.less");
		} else {
			failure("EROR", "Please provide a component name");

			exit();
		}
	break;

	case 'install': 
		if(isset($_SERVER['argv'][2])) {
			installComponent($pwd, $swd, $_SERVER['argv'][2]);
		} else {
			failure("EROR", "Please provide a component name");

			exit();
		}
	break;

	case 'remove':
		if(isset($_SERVER['argv'][2])) {
			$folder = $_SERVER['argv'][2];
			message("Removing $folder");
			$path = $pwd.'/build/components/'.$folder;

			if(file_exists($path)) {
				rrm_dir($path);
				success("NEW", "Removed ". $path);
			} else {
				failure("EROR", "Unknown component name");
			}

		} else {
			failure("EROR", "Please provide a component name");

			exit();
		}
	break;
	
	case 'update':
		updateInstalledHelix($pwd, $swd);
		updateHelix($pwd, $swd);
	break;

	case 'list':
		// Ingore these files
		$ignore = $IGNORED_LIST_FILES;

		if ($handle = opendir($swd .'/components/')) {
			while (false !== ($file = readdir($handle))) {
				if(!in_array($file, $ignore)) {	
					if(file_exists($pwd .'/build/components/'. $file)) {
						// check version 
						$installed = md5_file("$pwd/build/components/$file");
						$available = md5_file("$swd/components/$file");

						if($installed == $available) {
							success('INSTALLED', $file);
						} else {
							warn('CHANGED', $file);
						}
					} else {
						message('* '. $file);
					}
				}
			}
		}
	break;
	default: 
		message("helix [setup (-f)|create|install|remove|update|list]");
		message(" setup - setup a new helix project. Run in an existing folder (i.e cd ~/Site && helix setup)");
		message(" create - create a new component layout in the current project");
		message(" update - update helix components in the project");
		message(" install - install a new component from the repository");
		message(" list - list all the components");
		message(" remove - remove an installed component");
	break;
}