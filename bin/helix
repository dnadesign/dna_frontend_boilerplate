#!/usr/bin/env php
<?php

/**
 * helix (1)
 *
 * This is the command line runner for managing helix project. It allows the
 * user to create components and build new projects out of those components.
 *
 * For best use, this should be symlinked to your /usr/local/bin
 *
 * > sudo ln -s /usr/local/bin/helix ~/Scripts/helix/bin/helix
 */
$IGNORED_LIST_FILES = array(".","..", ".DS_Store");

$op = null;
$updated = false;

if (isset($_SERVER['argv'][1])) {
	$op = $_SERVER['argv'][1];
}

// folder we want helix to operate in.
$pwd = $_SERVER['PWD'];

// path to the 'installed' helix folder
$swd = dirname(dirname(realpath($_SERVER['argv'][0])));

$assets = $swd .'/helix/assets';

require_once $swd . '/bin/lib/Helpers.php';

global $setupFiles;
$setupFiles = array(
	'.bowerrc',
	'bower.json',
	'Gruntfile.js',
	'package.json',
	'Makefile'
);

global $setupFolders;
$setupFolders = array(
	'build',
	'build/components',
    'build/helix',
	'images',
	'images/svg',
	'dist'
);

global $bower;
$bower = array(
	'jquery',
	'bootstrap',
	'radio',
	'modernizer'
);

function installComponent($pwd, $swd, $name, $force = false) {
	if(!$force && file_exists($pwd .'/build/components/'. $name)) {
		failure('EROR', $name . ' is already installed. Please remove first.');

        return false;
	}

	$path = $swd .'/components/' . $name;

	if(file_exists($path)) {
		recurse_copy($path, $pwd .'/build/components/'. $name);

		success('DONE', $name . ' installed');
	} else {
		failure('ERROR', $name . ' cannot be found.');
	}
}

function updateHelix($pwd, $swd) {
	success('UPD', "Updating $swd");

	exec("cd $swd && git pull origin master");
}

function updateInstalledHelix($pwd, $swd) {
	success("NEW", "Updated build/helix/");

	recurse_copy($swd .'/helix/lib', $pwd .'/build/helix/lib');
    recurse_copy($swd .'/helix/addons', $pwd .'/build/helix/addons');
}

function setup($pwd, $swd, $force) {
    global $setupFiles, $setupFolders, $bower, $assets;

    foreach($setupFiles as $file) {
        if($force || !file_exists($pwd .'/'. $file)) {
            success("NEW", "Writing $file");

            file_put_contents(
                $pwd .'/'. $file,
                    file_get_contents($assets .'/'. $file)
                );
        } else {
            warn("WRN", "$file exists, not overriding");
        }
    }

    foreach($setupFolders as $folder) {
        if(!file_exists($pwd.'/'.$folder)) {
            success("NEW", "Creating $pwd/$folder");

            mkdir($pwd.'/'. $folder);
        } else {
            success("WRN", "$pwd/$folder exists");
        }
    }

    message("Setting up Grunt");
    updateInstalledHelix($pwd, $swd);

    message("Setting up NPM");
    exec("npm install --silent");

    message("Installing bower");
    exec("npm install bower -g");

    message("Setting up bower");
    exec("bower install");

    message("Setting up modernizr");
    exec("grunt modernizr");

    message("Installing bower dependancies");

    foreach($bower as $dependancy) {
        message(" - $dependancy");

        exec("bower install $dependancy");
    }

    message("Importing global");
    installComponent($pwd, $swd, 'mixins');
    installComponent($pwd, $swd, 'forms');
    installComponent($pwd, $swd, 'type');
    installComponent($pwd, $swd, 'grid');
    installComponent($pwd, $swd, 'reset');
}

switch($op) {
	case 'setup':
        $force = (isset($_SERVER['argv'][2]) && $_SERVER['argv'][2] == '-force');

		setup($pwd, $swd, $force);
	break;

	case 'create':
		if(isset($_SERVER['argv'][2])) {
			$folder = $_SERVER['argv'][2];

			if(!file_exists($pwd.'/build/components')) {
				mkdir($pwd.'/build/components');
			}

			success("NEW", "Creating $pwd/build/components/$folder");
			$path = $pwd.'/build/components/'.$folder;

			if(!file_exists($path)) {
				mkdir($path);
			}

			touch($pwd.'/build/components/'.$folder.'/'.$folder.'.less');
			success("NEW", "Creating $pwd/build/components/$folder/$folder.less");

            mkdir($pwd.'/build/components/'.$folder.'/markup/');
		} else {
			failure("EROR", "Please provide a component name");

			exit();
		}
	break;

	case 'install':
		if(isset($_SERVER['argv'][2])) {
            if($_SERVER['argv'][2] == "-all") {
                if ($handle = opendir($swd .'/components/')) {
                    while (false !== ($file = readdir($handle))) {
                        if(!in_array($file, $IGNORED_LIST_FILES)) {
                            installComponent($pwd, $swd, $file, true);
                        }
                    }
                }
            } else {
                installComponent($pwd, $swd, $_SERVER['argv'][2]);
            }
		} else {
			failure("EROR", "Please provide a component name");

			exit();
		}
	break;

	case 'remove':
		if(isset($_SERVER['argv'][2])) {
			$folder = $_SERVER['argv'][2];
			message("Removing $folder");
			$path = $pwd.'/build/components/'.$folder;

			if(file_exists($path)) {
				rrm_dir($path);
				success("NEW", "Removed ". $path);
			} else {
				failure("EROR", "Unknown component name");
			}

		} else {
			failure("EROR", "Please provide a component name");

			exit();
		}
	break;

	case 'update':
        if(isset($_SERVER['argv'][2]) && $_SERVER['argv'][2] != "-skipbin") {
            updateHelix($pwd, $swd);
        }

		updateInstalledHelix($pwd, $swd);

        if((isset($_SERVER['argv'][2]) && $_SERVER['argv'][2] == "-updateall") || (isset($_SERVER['argv'][3]) && $_SERVER['argv'][3] == "-updateall")) {
            setup($pwd, $swd, true);
        }
	break;

	case 'list':
		if ($handle = opendir($swd .'/components/')) {
			while (false !== ($file = readdir($handle))) {
				if(!in_array($file, $IGNORED_LIST_FILES)) {
					if(file_exists($pwd .'/build/components/'. $file)) {
						// check version
						$installed = md5_file("$pwd/build/components/$file");
						$available = md5_file("$swd/components/$file");

						if($installed == $available) {
							success('INSTALLED', $file);
						} else {
							warn('CHANGED', $file);
						}
					} else {
						message('* '. $file);
					}
				}
			}
		}
	break;

    case 'watch':
        success("RUN", "Installing NPM");
        exec("cd $pwd && npm install");

        success("RUN", "Installing bower");
        exec("cd $pwd && bower install");

        success("RUN", "Running grunt");
        exec("cd $pwd && grunt watch");
    break;

	default:
		message("helix [setup (-f)|create|install (-all)|remove|update|list]");
		message(" setup - setup a new helix project. Run in an existing folder (i.e cd ~/Site && helix setup)");
		message(" create - create a new component layout in the current project");
		message(" update - update helix components in the project");
		message(" install - install a new component from the repository");
		message(" list - list all the components");
		message(" remove - remove an installed component");
        message(" watch - proxy for Grunt watch. Will also install depenancies");
	break;
}
